---
- name: Import secrets
  include_vars: vault.yml
  no_log: true

- name: Install mtr-tiny
  apt:
    update-cache: yes
    name: mtr-tiny
    state: present

- name: Install whois
  apt:
    update-cache: yes
    name: whois
    state: present

- name: Install unbound-host
  apt:
    update-cache: yes
    name: unbound-host
    state: present

- stat: path=/etc/alternatives/host
  register: hostalternative
- stat: path=/usr/bin/host
  register: binhost

- name: Fix errant host(1) alternative
  command: rm -f /usr/bin/host /etc/alternatives/host /usr/share/man/man1/host.1.gz /etc/alternatives/host.1.gz
  when: (hostalternative.stat.exists and hostalternative.stat.lnk_source != '/usr/bin/unbound-host') or (binhost.stat.exists and not binhost.stat.islnk)

- stat: path=/etc/alternatives/host
  register: hostalternative

- name: Use unbound-host(1) as host(1)
  command: update-alternatives --install /usr/bin/host host /usr/bin/unbound-host 100 --slave /usr/share/man/man1/host.1.gz host.1.gz /usr/share/man/man1/unbound-host.1.gz
  when: not hostalternative.stat.exists or ( hostalternative.stat.exists and hostalternative.stat.lnk_source != '/usr/bin/unbound-host' )

- name: Install drill
  apt:
    update-cache: yes
    name: ldnsutils
    state: present

- name: Add projects share
  lineinfile:
    dest: /etc/crouton/shares
    regexp: ^encrypted/projects ~/projects$
    line: encrypted/projects ~/projects

- name: Check git push configuration
  command: git config --get --global push.default
  register: gitconfig_push
  changed_when: false
  failed_when: false
  ignore_errors: yes
  become: yes
  become_user: "{{ primary_user }}"

- name: Configure git
  command: git config --global push.default simple
  become: yes
  become_user: "{{ primary_user }}"
  when: gitconfig_push.stdout != 'simple'

- name: Install libxss1 (missing from Atom's dependencies)
  apt:
    update-cache: yes
    name: libxss1
    state: present

- name: Check if Atom is installed
  command: dpkg-query -l atom
  register: atom_installed
  changed_when: false
  failed_when: false
  ignore_errors: yes

- name: Download Atom
  # Use wget(1) instead because Python in jessie is too old to support
  # SNI, causing the download to fail
  command: "wget -nv -O {{ tmpdir_path }}/atom.deb https://atom.io/download/deb"
  when: atom_installed.stderr.find('no packages found') != -1

- name: Install Atom
  apt: deb="{{ tmpdir_path }}/atom.deb"
  when: atom_installed.stderr.find('no packages found') != -1

- name: Install Atom packages
  command: "apm install {{ item }}"
  args:
    creates: "~/.atom/packages/{{ item }}"
  with_items:
    - auto-detect-indentation
    - git-plus
    - highlight-selected
    - minimap
    - open-recent
    - sort-lines
    - terminal-fusion
    - todo-show
  become: yes
  become_user: "{{ primary_user }}"

- name: Install Atom configuration
  copy: src=config.cson dest=~/.atom/config.cson
  become: yes
  become_user: "{{ primary_user }}"

- name: Install programming languages
  apt:
    update-cache: yes
    name: "{{ item }}"
    state: present
  with_items:
    - ruby

- name: Install tools
  apt:
    update-cache: yes
    name: "{{ item }}"
    state: present
  with_items:
    - httpie
    - jq
    - sharutils
    - uuid-runtime

- name: Install source control tools
  apt:
    update-cache: yes
    name: "{{ item }}"
    state: present
  with_items:
    - subversion
    - gitg

- name: Create SSH directory
  file:
    dest: ~/.ssh
    mode: 0700
    state: directory
  become: yes
  become_user: "{{ primary_user }}"

- name: Install SSH configuration
  copy:
    content: "{{ ssh_config }}"
    dest: ~/.ssh/config
    mode: 0600
  become: yes
  become_user: "{{ primary_user }}"
  no_log: true

- name: Install SSH keypairs
  copy:
    content: "{{ item.data }}"
    dest: "~/.ssh/{{ item.file }}"
    mode: 0600
  with_items: "{{ ssh_keypairs }}"
  become: yes
  become_user: "{{ primary_user }}"
  no_log: true

- name: Install SSH agent helper
  copy:
    src: start-agent
    dest: ~/.ssh/start-agent
    mode: 0600
  become: yes
  become_user: "{{ primary_user }}"

- name: Install Android development tools
  apt:
    update-cache: yes
    name: "{{ item }}"
    state: present
  with_items:
    - android-tools-fastboot
    - android-tools-adb
